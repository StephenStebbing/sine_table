#!/usr/bin/python
# -----------------------------------------------------------------------------
# Copyright Stephen Stebbing 2016. http://telecnatron.com/
#
# -----------------------------------------------------------------------------
import math;


class SineTable:

    PI2 = 2.0 * math.pi;

    def __init__(self, num_entries=256, num_bits=8, phase_offset=0):

        self.num_entries=num_entries;
        self.num_bits=num_bits;
        # Table entry must be below this value, based on num bits.
        self.entry_ceil = int(math.pow(2,num_bits))
        self.set_phase_offset(phase_offset)
        # array containing an entry for each 
        self.entries=[]


    # Set phase offset to passed offset
    def set_phase_offset(self, phase_offset):
        self.phase_offset=phase_offset;


    # Set phase offset to passed value which is in degrees
    def set_phase_offset_deg(self, phase_offset_deg):
        self.phase_offset= int(round((phase_offset_deg%360) /360.0 *self.num_entries));


    def calculate(self):
        # reset table
        self.entries=[];

        # make up the table of entries
        for i in range (0, num_entries):
            phase= (phase_offset+i) % num_entries;
            # current angle in radians
            angle = (phase)*self.PI2/(num_entries)
            angled = (phase)*360/(num_entries)
            sine=math.sin(angle)
            # calculate table value for this angle
            value=int(round((sine+1)/2.0*(self.entry_ceil-1)))
            # make up entry and append to dictionary
            dent={'index':i, 'value':value, 'phase':phase, 'angle_rad':angle, 'angle_deg':angled, 'sine':sine}
            self.entries.append(dent)


    def output_c(self, pgmspace=False):

        # header comments
        print '// Generated by $0'
        print '// Table representing sine wave with {:d} entries of {:d} bits each.'.format(self.num_entries, self.num_bits)
        print '// Phase offset: {:d} places ({:5.2f} degrees). Resolution: {:5.2f} degrees'.format(self.phase_offset, self.phase_offset * 360.0 / self.num_entries, 360.0/ self.num_entries )
        print '// -1 is represented by value 0x0, 1 by 0x{:02x}'.format(self.entry_ceil-1);

        for i in range (0, self.num_entries):
            print "i: ",i, "value: ", self.entries[i]['value']

        

# -----------------------------------------------------------------------------
if __name__ == '__main__':
    
    # number of entries in the table
    num_entries=256;
    # bits per entry
    num_bits=8;
    # phase offset
    phase_offset=0;

    tab=SineTable()
    tab.set_phase_offset_deg(90);
    tab.calculate()
    tab.output_c()

#        print '{:3d} {:3d} {:4.2f} {:5.1f} {: 4.2f} {:03d} 0x{:02x}'.format(i, phase, angle, angled, sine, entry, entry)
