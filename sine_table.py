#!/usr/bin/python
# -----------------------------------------------------------------------------
# Copyright Stephen Stebbing 2016. http://telecnatron.com/
# Released under the MIT License
# See https://github.com/StephenStebbing/sine_table
# -----------------------------------------------------------------------------
""" Generate and print lookup table for sine wave"""

import math
import sys
import argparse

class SineTable(object):
    """Class that generates a lookup table for a sine wave."""

    # constants
    PI2 = 2.0 * math.pi

    def __init__(self, num_entries=256, num_bits=8, phase_offset=0):
        """Init class, set parameters """
        self.num_entries = num_entries
        self.num_bits = num_bits
        self.phase_offset = 0
        # Table entry must be below this value, based on num bits.
        self.entry_ceil = int(math.pow(2, num_bits))
        self.set_phase_offset(phase_offset)
        # array containing an entry for each table entry
        self.entries = []


    def set_phase_offset(self, phase_offset):
        """Set phase offset to passed value, as specified in number of table entries"""
        self.phase_offset = phase_offset


    def set_phase_offset_deg(self, phase_offset_deg):
        """Set phase offset to passed value, as specified in degrees"""
        self.phase_offset = int(round((phase_offset_deg%360) / 360.0 *self.num_entries))


    def calculate(self):
        """Calculate the sine values and fill in the table data."""
        # reset table
        self.entries = []

        # make up the table of entries
        for i in range(0, self.num_entries):
            phase = (self.phase_offset+i) % self.num_entries
            # current angle in radians
            angle = (phase)*self.PI2/(self.num_entries)
            angled = (phase)*360/(self.num_entries)
            sine = math.sin(angle)
            # calculate table value for this angle
            value = int(round((sine+1)/2.0*(self.entry_ceil-1)))
            # make up entry and append to dictionary
            dent = {'index':i, 'value':value, 'phase':phase, 'angle_rad':angle, 'angle_deg':angled, 'sine':sine}
            self.entries.append(dent)


    def output_c(self, tab_ctype='uint8_t', tab_name='sine_table', pgmspace=False, h_guard=False,
                 h_guard_name='SINE_TABLE', verbose=False):
        """Print the table as a C header file"""
        #
        hgn = h_guard_name+'_H'
        if h_guard:
            print '#ifndef ', hgn
            print '#define ', hgn

        # header comments
        print
        print '// Generated by sine_table.py utility. See https://github.com/StephenStebbing/sine_table'
        print '// Table representing sine wave with {:d} entries of {:d} bits each.'.\
            format(self.num_entries, self.num_bits)
        print '// Phase offset: {:d} places ({:5.2f} degrees). Resolution: {:5.2f} degrees'.\
            format(self.phase_offset, self.phase_offset * 360.0 / self.num_entries, 360.0/ self.num_entries)
        print '// -1 is represented by value 0x0, 1 by 0x{:02x}'.format(self.entry_ceil-1)
        print

        if pgmspace:
            print '\n#include <avr/pgmspace.h>\n'
            progmem = 'PROGMEM'
        else:
            progmem = ''

        # table header
        print 'static const ' + tab_ctype + ' ' + tab_name + '[] '+ progmem+ '={'

        # table entries
        count = 0
        for i in range(0, self.num_entries):
            # When verbose we output a comment with current values
            if verbose and count == 0:
                ent = self.entries[i]
                print '// index: {: 3d}, phase: {: 3d}, angle_rad: {:5.3f}, angle_deg: {:5.1f}, sine: {:5.3f}, value: {:3d}'\
                    .format(ent['index'], ent['phase'], ent['angle_rad'], ent['angle_deg'], ent['sine'], ent['value'])

            # write the entry, add comma if it's not the last
            sys.stdout.write('0x{:02x}'.format(self.entries[i]['value']))
            if i < self.num_entries-1:
                sys.stdout.write(', ')

            # start new line if appropiate
            count += 1
            if count == 8:
                print
                count = 0

        print '}'
        if h_guard:
            print '#endif // ', hgn

# -----------------------------------------------------------------------------
def main():
    """Function called when this module is running as __main__"""

    # process command line arguments
    argp = argparse.ArgumentParser()
    argp.add_argument('-ne', '--num_entries', help="Number of entries in the table. Default 256", default=256)
    argp.add_argument('-nb', '--num_bits', default=8, help="Number of bits in the entry values. Default 8")
    argp.add_argument('-v', '--verbose', action='store_true', help="Include comments in the table. Default false", \
                      default=False)

    group = argp.add_mutually_exclusive_group()
    group.add_argument('-po', '--phase_offset', default=0, \
                       help="phase offset of first entry expressed in table positions. Default 0", type=int)
    group.add_argument('-pod', '--phase_offset_degrees', default=0, \
                       help="phase offset of first entry expressed in degrees. Default 0", type=float)

    argp.add_argument('-ct', '--ctype', type=str, help="C type for the array elements. Default 'uint8_t'", \
                      default="uint8_t")
    argp.add_argument('-tn', '--table_name', type=str, help="Name for the table variable. Default 'sine_table'", \
                      default="sine_table")
    argp.add_argument('-af', '--avr_flash', action='store_true', help="For AVR processors: place table in flash memory", \
                      default=False)
    argp.add_argument('-hg', '--h_guard', action='store_true', help="For C header file, enclose with #ifndef guard code", \
                      default=False)
    argp.add_argument('-hn', '--h_guard_name', type=str, \
                      help="Use this name for C header #ifndef guard code. Default 'SINE_TABLE'", default="SINE_TABLE")
    args = argp.parse_args()

    # intialise the table and print it out
    tab = SineTable(args.num_entries, args.num_bits)
    if args.phase_offset != 0:
        tab.set_phase_offset(args.phase_offset)
    if args.phase_offset_degrees != 0:
        tab.set_phase_offset_deg(args.phase_offset_degrees)
    tab.calculate()
    tab.output_c(pgmspace=args.avr_flash, h_guard=args.h_guard, h_guard_name=args.h_guard_name,
                 verbose=args.verbose, tab_ctype=args.ctype, tab_name=args.table_name)


if __name__ == '__main__':
    main()
