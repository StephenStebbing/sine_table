#!/usr/bin/python
# -----------------------------------------------------------------------------
# Copyright Stephen Stebbing 2016. http://telecnatron.com/
#
# -----------------------------------------------------------------------------
import math
import sys
import argparse

class SineTable:

    PI2 = 2.0 * math.pi

    def __init__(self, num_entries=256, num_bits=8, phase_offset=0):

        self.num_entries=num_entries
        self.num_bits=num_bits
        # Table entry must be below this value, based on num bits.
        self.entry_ceil = int(math.pow(2,num_bits))
        self.set_phase_offset(phase_offset)
        # array containing an entry for each 
        self.entries=[]


    # Set phase offset to passed offset
    def set_phase_offset(self, phase_offset):
        self.phase_offset=phase_offset


    # Set phase offset to passed value which is in degrees
    def set_phase_offset_deg(self, phase_offset_deg):
        self.phase_offset= int(round((phase_offset_deg%360) /360.0 *self.num_entries))


    def calculate(self):
        # reset table
        self.entries=[]

        # make up the table of entries
        for i in range (0, num_entries):
            phase= (self.phase_offset+i) % num_entries
            # current angle in radians
            angle = (phase)*self.PI2/(num_entries)
            angled = (phase)*360/(num_entries)
            sine=math.sin(angle)
            # calculate table value for this angle
            value=int(round((sine+1)/2.0*(self.entry_ceil-1)))
            # make up entry and append to dictionary
            dent={'index':i, 'value':value, 'phase':phase, 'angle_rad':angle, 'angle_deg':angled, 'sine':sine}
            self.entries.append(dent)


    def output_c(self, tab_ctype='uint8_t', tab_name='sine_table', pgmspace=False, h_guard=False, h_guard_name='SINE_TABLE', verbose=False ):

        #
        if(h_guard):
            print '#ifndef ',h_guard_name,'_H'
            print '#define ',h_guard_name,'_H'

        # header comments
        print '// Generated by sine_table.py utility. See '
        print '// Table representing sine wave with {:d} entries of {:d} bits each.'.format(self.num_entries, self.num_bits)
        print '// Phase offset: {:d} places ({:5.2f} degrees). Resolution: {:5.2f} degrees'.format(self.phase_offset, self.phase_offset * 360.0 / self.num_entries, 360.0/ self.num_entries )
        print '// -1 is represented by value 0x0, 1 by 0x{:02x}'.format(self.entry_ceil-1)

        if(pgmspace):
            print '\n#include <avr/pgmspace.h>\n'
            progmem='PROGMEM'
        else:
            progmem=''
        # table header
        print 'static const  ',tab_ctype, ' ', tab_name,'[]', progmem, '= {'

        # table entries
        c=0
        for i in range (0, self.num_entries):
            
            # When verbose we output a comment with current values
            if(verbose and c==0):
                ent=self.entries[i]
                print '// index: {: 3d}, phase: {: 3d}, angle_rad: {:5.3f}, angle_deg: {:5.1f}, sine: {:5.3f}, value: {:3d}'.format(ent['index'], ent['phase'], ent['angle_rad'], ent['angle_deg'], ent['sine'], ent['value'])

            sys.stdout.write('0x{:02x}, '.format(self.entries[i]['value']))
            c+=1
            if(c==8):
                print
                c=0

        print '}'
        if(h_guard):
            print '#endif // ',h_guard_name,'_H'
        

# -----------------------------------------------------------------------------
if __name__ == '__main__':


    argp = argparse.ArgumentParser()
    argp.add_argument('-ne','--num_entries', help="Number of entries in the table.", default=256)
    argp.add_argument('-nb','--num_bits', default=8, help="Number of bits in the entry values.")
    argp.add_argument('-v','--verbose',  action='store_true',  help="Include comments in the table", default=False)
    argp.add_argument('-ew','--eeprom-write', type=str,  help="Write specified binary file to MCU's eeprom.")
    group = argp.add_mutually_exclusive_group()
    group.add_argument('-po','--phase_offset', default=0, help="phase offset of first entry expressed in table positions.", type=int)
    group.add_argument('-pod','--phase_offset_degrees', default=0, help="phase offset of first entry expressed in degrees.", type=float)

    args = argp.parse_args()
    

    tab=SineTable(args.num_entries, args.num_bits)
    if(args.phase_offset!=0):
        tab.set_phase_offset(args.phase_offset)
    if(args.phase_offset_degrees!=0):
        tab.set_phase_offset_deg(args.phase_offset_degrees )
    tab.calculate()
    tab.output_c(pgmspace=True, h_guard=True, verbose=args.verbose)


